function createKeyboard(keyLayout,callbacks,keycss) {
 var keys = [];
 
 for (var i in keyLayout) {
   var line = keyLayout[i]
   keys = line.split(' ');
   if ($('#keys').hasClass('done')) {
    return;
   }
   var row = $('<div class="table-row"></div>');
   for (var j in keys) {
     key = keys[j];
     var elem = $('<div></div>');
     elem.id = 'key_' + key;
     elem.attr('key',key);
     elem.html(key);
     elem.css(keycss.defcss);
     elem.addClass('key key-'+ key);
     if (j == 0) {
      elem.addClass('key-first');
     } else if (j == keys.length - 1) {
      elem.addClass('key-last');
     }
     elem.mouseover(
       function () {
         $(this).addClass('key-hover');
       }  
     );
     elem.mouseout(
       function () {
         $(this).removeClass('key-hover');
       }  
     );
     elem.mousedown(
       function () {
         $(this).addClass('key-active');
       }  
     );
     elem.mousedown(
       function () {
         $(this).removeClass('key-active');
       }  
     );
     var cfunc = '';
     switch(key) {
       case 'Enter':
         elem.addClass('widekey');
         cfunc = function () {
           if (callbacks['Enter']) {
             callbacks['Enter'].call(this);
           }
         };
         break;
       case 'Bksp':
         elem.addClass('wide-key');
         cfunc = function () {
           var v = $('#keyboard_input').val();
           var caret = $('#keyboard_input').caret().start;
           var len = v.length;
           var t = [v.substring(0,caret-1) + v.substring(caret,len)];
           $('#keyboard_input').val(t[0]);
           caret -= 1;
         };
         break;
       case 'clear':
         elem.html('C');
         cfunc = function () {
           $('#keyboard_input').val('');
         }
         break;
       case 'Search':
         cfunc = function () {
           initSearch();
         }
         break;
       case 'Suche':
         cfunc = function () {
           initSearch();
         }
         break;
       case 'wide':
         elem.addClass('wide-key');
         elem.html('&nbsp;');
         break;
       case 'key':
         elem.html('&nbsp;');
         break;
       case 'Space':
         elem.addClass('wide-key');
         
         break;
       default:
         cfunc = function () {
           var v = $('#keyboard_input').val();
           var txt = $(this).attr('key');
           insertText(v,txt);
         };
     }
     elem.mousedown(cfunc);
     
     row.append(elem);
   }
   //$('#keys').append(row);
 }
 $('#keys').addClass('done');
 focusInput($('#keyboard_input'));
}
var keyLayout =  [
      ''
];
var keypad_callbacks = {
 Enter: function () {
   if ($('#keyboard_input').val()) {
     add_item($('#keyboard_input').val());
     focusInput($('#keyboard_input'));
   }
 },
 'Suche': function () {
    showSearch();
 }
};
var keycss = {
 defcss: {
 }
 
};
function insertText(v,txt) {
 var caret = $('#keyboard_input').caret().start;
 var len = v.length;
 var ntxt = v.substring(0,caret) + txt + v.substring(caret,len);
 $('#keyboard_input').val(ntxt).caret(v.length);
}
$(document).ready(function () {
    createKeyboard(keyLayout,keypad_callbacks,keycss);
    $('#keyboard_input').bind('keyup',function (e) {
        handleKeyboardInput(e);
    });
    $('#keyboard_input').click(function(){ $(this).select(); });
});


