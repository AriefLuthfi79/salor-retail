<% cache('in_place_edit/'+user_cache_name) do -%>
<script type="text/javascript">
var receiver_shipper_select = function (value) {
      <%
        shippers = salor_user.get_shippers(nil)
        ships = []
        shippers.each do |ship|
          ships << "<option value='Shipper:#{ship.id}'>#{ship.name}</option>"
        end

        shippers = salor_user.get_vendors(nil)
        shippers.each do |ship|
          ships << "<option value='Vendor:#{ship.id}'>#{ship.name}</option>"
        end

        ships = ships.join(' ')
        s = "<select id='inplaceedit'>#{ships}</select>"
      %>
      s = $("<%= raw s %>");
      s = set_selected(s,value,0);
      return s;
}

  var fields_callbacks = {
    rebate: function (elem) {
      elem.addClass("keyboardable-int");
      elem.addClass("rebate-amount");
    },
    price: function (elem) {
      elem.addClass("keyboardable-int");
    },
    quantity: function (elem) {
      elem.addClass("keyboardable-int");
    },
    tax: function (elem) {
      elem.addClass("keyboardable-int");
    },
    subtotal: function (elem) {
      elem.addClass("keyboardable-int");
    },
    total: function (elem) {
      elem.addClass("keyboardable-int");
    },
    points: function (elem) {
      elem.addClass("keyboardable-int");
    },
    lc_points: function (elem) {
      elem.addClass("keyboardable-int");
    }
  };
  var field_types = {
    category_id: function (value) {
      <%
        categories = GlobalData.salor_user.get_all_categories
        cats = []
        categories.each do |cat|
        cats << "<option value='#{cat.id}'>#{cat.name.gsub('"','\"')}</option>"
        end
        cats = cats.join(' ')
        s = "<select id='inplaceedit'>#{cats}</select>"
      %>
      s = $("<%= raw s %>");
      s = set_selected(s,value,0);
      return s;
    },
    vendor_id: function (value) {
      <%
        vendors = salor_user.get_vendors(nil)
        stores = []
        vendors.each do |store|
          stores << "<option value='#{store.id}'>#{store.name}</option>"
        end
        stores = stores.join(' ')
        s = "<select id='inplaceedit'>#{stores}</select>"
      %>
      s = $("<%= raw s %>");
      s = set_selected(s,value,0);
      return s;
    },
    location_id: function (value) {
      <%
        locations = Location.by_vendor(salor_user.meta.vendor_id)
        locs = []
        locations.each do |loc|
          locs << "<option value='#{loc.id}'>#{loc.name}</option>"
        end
        locs = locs.join(' ')
        s = "<select id='inplaceedit' >#{locs}</select>"
      %>
      s = $("<%= raw s %>");
      s = set_selected(s,value,0);
      return s;
    },
    item_type_id: function (value) {
      <%
        item_types = ItemType.all
        itps = []
        item_types.each do |itp|
          itps << "<option value='#{itp.id}'>#{itp.name}</option>"
        end
        itps = itps.join(' ')
        s = "<select id='inplaceedit' >#{itps}</select>"
      %>
      s = $("<%= raw s %>");
      s = set_selected(s,value,0);
      return s;
    },
    status: function (value) {
      <%
        shipment_statuses = Shipment::TYPES
        itps = []
        shipment_statuses.each do |itp|
        itps << "<option value='#{itp[:value]}'>#{itp[:display]}</option>"
        end
        itps = itps.join(' ')
        s = "<select id='inplaceedit' >#{itps}</select>"
      %>
      s = $("<%= raw s %>");
      s = set_selected(s,value,0);
      return s;
    },
    rebate_type: function (value) {
      <%
        rebate_types = Order::REBATE_TYPES
        itps = []
        rebate_types.each do |itp|
        itps << "<option value='#{itp[1]}'>#{itp[0]}</option>"
        end
        itps = itps.join(' ')
        s = "<select id='inplaceedit' >#{itps}</select>"
      %>
      s = $("<%= raw s %>");
      s = set_selected(s,value,1);
      return s;
    },
    the_shipper: receiver_shipper_select,
    the_receiver: receiver_shipper_select
  };
  function in_place_edit(id,x,y) {
	$('#inplaceedit-div').remove();
	var type = $('#' + id).attr('field');
	var datatype = $('#' + id).attr('data_type');
	var klass = $('#' + id).attr('klass');
	var withstring = $('#' + id).attr('withstring');
	withstring = withstring + '&ajax=true';
	var value = $('#' + id).html();

	if (value == '' || value == null) {
	  value = '<%= t("system.errors.value_not_set") %>';
	}

	if (field_types[type]) {
	  field = field_types[type].call(this,value);
	} else {
	  var field = $("<input type='text' class='inplaceeditinput' id='inplaceedit' value='"+value+"' />");
	}
	if (fields_callbacks[type]) {
	  fields_callbacks[type].call(this,field);
	}

	var savelink = '<a id="inplaceeditsave" class="button-confirm"><%= t("menu.ok") %></a>';
	var cancellink = '<a id="inplaceeditcancel" class="button-cancel"><%= t("menu.cancel") %></a>';
	var linktable = "<table class='inp-menu' align='right'><tr><td>"+cancellink+"</td><td>"+savelink+"</td></tr></table>";

	if (id == 'pos_order_total') {
	  x = x - 200;
	}
	if ($('#' + id).hasClass('pos-item-total') || $('#' + id).hasClass('pos-item-rebate')) {
	  x = x - 200;
	}
	var offset = {'top' : 20, 'left' : '20%', 'position' : 'absolute', 'width': '60%'}
	var div = $("<div id='inplaceedit-div'></div>");
	$('body').append(div);
	div.append(field);
	div.append('<br />');
	div.append(linktable);




	if (field[0].tagName != 'SELECT') {
          field.keyboard({
            openOn   : 'focus',
            stayOpen : true,
            layout       : field.hasClass('keyboardable-int') ? 'num' : '<%= I18n.locale %>',
            customLayout : null,
            visible : function(){$('.ui-keyboard-preview').select();},
            accepted: function(){ in_place_edit_go(id); }
          });
	}

	$('#inplaceedit-div').css(offset);
	$('#inplaceeditsave').mousedown(function () {
			in_place_edit_go(id);
			focuseKeyboardInput = true;
	});
	$('#inplaceeditcancel').mousedown(function () {
			$('#inplaceedit-div').remove();
			focuseKeyboardInput = true;
	});

	if (type == 'datepicker') {
		$('#inplaceedit').datepicker();
	}
  inplaceEditBindEnter(true, id);
  //div.children('.kbd-show-button').trigger('mousedown');
  focusInput($('#inplaceedit'));
}

/**
 * This allows us to easily turn off the binding to the enter key when we need
 * something else to catch it
 */
function inplaceEditBindEnter(doBind, id) {
  $('#inplaceedit').unbind('keypress');
  if (doBind) {
	$('#inplaceedit').bind('keypress', function (e) {
			var code = (e.keyCode ? e.keyCode : e.which);
			 if(code == 13) { //Enter keycode
				   in_place_edit_go(id);
			 }
 	});
 }
}

function in_place_edit_go(id) {
  var type = $('#' + id).attr('field');
	var datatype = $('#' + id).attr('data_type');
	var klass = $('#' + id).attr('klass');
	var withstring = $('#' + id).attr('withstring');
	withstring = withstring + '&ajax=true';
	var value = $('#' + id).html();


  var final_value = $('#inplaceedit').val();
  final_value = final_value.replace("%",'');
  var string = '/vendors/edit_field_on_child?id='+ $('#' + id).attr('model_id') +'&klass='+klass+'&field='+type+'&value=' + final_value + '&' + withstring
  get(string, '_in_place_edit.html.erb', function () {
  });
  if ($('#' + id).attr('update_pos_display') == 'true') {
    update_order_items();
    update_pos_display();
  }
  if ($('#inplaceedit')[0].tagName == 'SELECT') {
    $('#' + id).html($('#inplaceedit option:selected').html());
  } else {
    $('#' + id).html(final_value);
  }

  $('#inplaceedit-div').remove();
  if ($('#keyboard_input').length != 0) {
    focuseKeyboardInput = true;
  }
}
</script>
<% end -%>

