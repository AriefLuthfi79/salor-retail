<script type="text/javascript">

function playSound(file) {
  Salor.playSound(file);
}

var focuseKeyboardInput = false;
var calledFrom = 'TopOfAppJS';
  // Place your application-specific JavaScript functions and classes here
  // This file is automatically included by javascript_include_tag :defaults
  jQuery.expr[':'].focus = function( elem ) {
    return elem === document.activeElement && ( elem.type || elem.href );
  };
 function dbg(obj) {
    var str = '';
    alert(obj.width);
    for (var prop in obj) {
      str = str + " " + prop + ":" +obj[prop];
    }
    alert(str);
  }
   function print_order(id) {
    <% if $Conf and $Conf.salor_printer == true %>
      SalorPrinter.printURL('<%= $Register.thermal_printer %>','<%= $Conf.url %>/orders/render_order_receipt?order_id=' + id);
    <% else %>
      $.get('/orders/print_receipt?order_id=' + id);
    <% end -%>
  }
  if (typeof Salor != 'undefined') {
    function snapCam() {
      Salor.captureCam(0,'<%= ::Rails.root.to_s  %>/public/images/cameras/camera-0.png',1);
      setTimeout("snapCam()",2000);
    }
    //setTimeout("snapCam()",2000);
  }
    function salorGetOffset( el ) {
        var _x = 0;
        var _y = 0;
        while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
            _x += el.offsetLeft - el.scrollLeft;
            _y += el.offsetTop - el.scrollTop;
            el = el.offsetParent;
        }
        return { top: _y, left: _x };
    }

	function get_position(x,y) {
		var z = x;
		x = 1/Math.sqrt(2) * (z - y);
		y = 1/Math.sqrt(2) * (z + y);
		return {x: x, y: y};
	}
  /*
    This is the new key press function, find someway to hook the current
    key functionality because something weird is happening with NUMPAD keys,
    so we took it over in the c code.
  */
  function salorKeyRelease(keyCode) {
    alert(keyCode);
  }
  

  var handled = false;
  var handleKeyboardEnter = true;
  var keypressHandler = function(){}; // This is for the new global keypress handling. Pass in a reference to handler here
  var oldKeypressHandler = function(){};
  var onEnterKey = function(event){}; // Some function to specifically handle the Enter key being pressed
  var oldOnEnterKey = function(event){};
  var onEscKey = function(){}; // Some function to specifically handle the Escape key being pressed
  var oldOnEscKey = function(){};
  var ENTER_KEY = 13;
  var ESC_KEY = 27;
  var onF2Key = function (event) {
    if ($(".last-five-orders").is(":visible")) {
      $(".last-five-orders").hide();
      var skey = 49;
      for (var i = 0; i < 5; i++) {
        keypressMap[skey] = null;
        skey = skey + 1;
      }
    } else {
      $(".last-five-orders").show();
      var skey = 49;
      for (var i = 0; i < 5; i++) {
        keypressMap[skey] = function (event) {
          var skey = (event.which) ? event.which : event.keyCode;
          var loc = $('.last-five-orders-' + skey).attr('location');
          window.location = loc;
        }
        skey = skey + 1;
      }
    }
  } // end onF2Key
  var onEndKey = function(event) {
    if (params.controller == 'orders' && params.action == 'new') {
      get('/orders/show_payment_ajax?order_id=' + $('.order-id').html());
    }
  }
  var keypressMap = {
    13: onEnterKey,
    27: onEscKey
  };

  var oldKeypressMap = {
    13: onEnterKey,
    27: onEscKey
  };
  var filename = "_application_js.html.erb";
  var MX,MY;
  <% if $Conf  %>
    var Conf = <%= raw $Conf.attributes.to_json %>;
    var Meta = <%= raw $User.get_meta.attributes.to_json %>;
    <% else  %>
    var Conf = {};
    var Meta = {};
  <% end %>
  <% if $User then %>
    var User = <%= raw $User.attributes.to_json %>
    window.Drawer = <%= raw $User.get_drawer.attributes.to_json %>
  <% end -%>
  var params = {
    action: "<%= params[:action] %>",
    controller: "<%= params[:controller] %>",
<% cache('application_js/'+user_cache_name) do -%>
      user: {
        name: "<%= salor_user.username if salor_user %>"
      }
    };

    $(document).mousemove(function(e){
      MX = e.pageX;
      MY = e.pageY;
    });

    $.fn.idle = function(time){
      var i = $(this);
      i.queue(function(){
        setTimeout(function(){
          i.dequeue();
        }, time);
      });
    };
    function confirm_link(link,message) {
      var answer = confirm(message)
      if (answer){
        window.location = link;
      }
    }
    $(document).ready(function() {
      // from application_js
      $(".action-button").each(function () {
        make_action_button($(this));
      });
      //$('#switcher').themeswitcher();
      //$("button, input:submit").button();
      // $("input").addClass("input");
      $('.keyboardable').each(function () {
        make_keyboardable($(this));
      });
      $('.keyboardable-int').each(function () {
        make_keyboardable($(this));
      });
      $('#order_items_table tr:even').addClass('even');
      $('.stripe-me tr:even').addClass('even');
      $('.stripe-me2:even').addClass('even');
      $('div.stripe-me > div.table-row:even').addClass('even');

      $('#generic_search_input').val('');

      /*
      Bind keypress Enter to the document with a default handler.
      To use, just need to define a function called enterHandler() on the page
       */
      $(document).keypress(function(event){
                           
        var keyCode = (event.which) ? event.which : event.keyCode;
        if (keypressMap[keyCode]) {
          var func = keypressMap[keyCode];
          func(event);

            var cf = $('.salor-focused');
            if (cf.hasClass('inplaceeditinput') && cf.val() != '') {
              $('#inplaceeditsave').trigger('click');
              handled = true;
            } else if (cf.hasClass('shipment-items-input') && cf.hasClass('attr-input-sku')) {
              cf.trigger('blur');
              handled = true;
            } else if (cf.attr('id') == 'search_keywords') {
              search();
              event.preventDefault();
              return false;
            }
            if ($('#keyboard_input').val()) {
              if (handleKeyboardEnter) {
                keypad_callbacks['Enter'].call(this);
                handled = true;
              } else {
                event.preventDefault();
                return false;
              }
            } else {
              //we aren't on the pos screen, so we should have some generic behaviors
              if (params.controller == "shippers") {
                handled = true;
              }
              focusInput($('#keyboard_input'));
            }
            if ($('#generic_search_input').length != 0 && $('#generic_search_input').val() != '') {
              generic_search();
              handled = true;
              return false;
            }
            if (isEditItem()) {
              handled = true;
              return false;
            }
            if (isEditItemLocation()) {
              update_location_submit();
              handled = true;
              return false;
            }
            if (isEditItemRealQuantity()) {
              update_real_quantity_submit();
              handled = true;
              return false;
            }
            if (isShipmentsEdit()) {
              shipments_edit_handler(event.target);
              handled = true;
              return false;
            }
            if (isDiscountsEdit() || isCustomersEdit()) {
              handled = true;
              return false;
            }
            if (handled == true) {
              event.preventDefault();
              return false;
            } else {
              return true;
            }

        }
      });
      focusInput($('#generic_search_input'));

      // FOR FANCY CHECKBOXES:
      $('input:checkbox:not([safari])').checkbox();
      $('input[safari]:checkbox').checkbox({cls:'jquery-safari-checkbox'});
      $('input:radio').checkbox();
    });

    function getKeypressCodeArr(codes) {
      var codeStr = String(codes);
      var codeArr = [];
      var tmpArr = codeStr.split(',');
      for (i=0; i<tmpArr.length; i++) {
        // check each of these to see if they split out into a range
        var rangeArr = tmpArr[i].split('-');
        if (rangeArr.length > 1) {
          for (j=parseInt(rangeArr[0]); j<=parseInt(rangeArr[1]); j++) {
            codeArr.push(j);
          }
        } else {
          codeArr.push(rangeArr[0]);
        }
      }
      return codeArr;
    }

    function setKeypressHandler(code, func) {
      var codeArr = getKeypressCodeArr(code);
      for (i=0; i<codeArr.length; i++) {
        oldKeypressMap[code] = (keypressMap[code]) ? keypressMap[codeArr[i]] : function(){};
        keypressMap[codeArr[i]] = func;
      }
    }

    function unsetKeypressHandler(code) {
      var codeArr = getKeypressCodeArr(code);
      for (i=0; i<codeArr.length; i++) {
        keypressHandler = (oldKeypressMap[codeArr[i]]) ? oldKeypressMap[code] : function(){};
        oldKeypressMap[codeArr[i]] = function(){};
      }
    }

    function setOnEnterKey(func) {
      setKeypressHandler(ENTER_KEY, func);
    }

    function unsetOnEnterKey() {
      unsetKeypressHandler(ENTER_KEY);
    }

    function setOnEscKey(func) {
      setKeypressHandler(ESC_KEY, func);
    }

    function unsetOnEscKey() {
      unsetKeypressHandler(ESC_KEY);
    }

    function bindFirstLetter(word, func, bothCases) {
      if (bothCases == null) bothCases = false;
      var bindChar = word.charAt(0);
      var isUpperCase = (bindChar.toUpperCase() == bindChar) ? true : false;
      setKeypressHandler(bindChar.charCodeAt(0), func);
      if (bothCases) {
        if (isUpperCase) {
          bindChar = bindChar.toLowerCase();
        } else {
          bindChar = bindChar.toUpperCase();
        }
        setKeypressHandler(bindChar.charCodeAt(0), func);
      }
    }

    function unbindFirstLetter(word, bothCases) {
      if (bothCases == null) bothCases = false;
      var bindChar = word.charAt(0);
      var isUpperCase = (bindChar.toUpperCase() == bindChar) ? true : false;
      unsetKeypressHandler(bindChar.charCodeAt(0));
      if (bothCases) {
        if (isUpperCase) {
          bindChar = bindChar.toLowerCase();
        } else {
          bindChar = bindChar.toUpperCase();
        }
        unsetKeypressHandler(bindChar.charCodeAt(0));
      }
    }

    function toFloat(str, returnString) {
      if (str == '') {return 0.0;}
      if (returnString == null) returnString = false;
      if (typeof str == 'number') {
        return str;
      }
      if (str.match(/\d+\.\d+\,\d+/)) {
        str = str.replace('.','');
      }
      var ac = [0,1,2,3,4,5,6,7,8,9,'.',',','-'];
      var nstr = '';
      for (var i = 0; i < str.length; i++) {
        c = str.charAt(i);
        if (inArray(c,ac)) {
          if (c == ',') {
            nstr = nstr + '.';
          } else {
            nstr = nstr + c;
          }
        }
      }
      return (returnString) ? nstr : parseFloat(nstr);
    }

    function make_dt_button(btn) {
      if (btn.hasClass("btn-done")) {
        return;
      }
      btn.mousedown(function (event) {
                    $('.dt-tag-button').removeClass("highlight");
                $(this).addClass("highlight");
                if ($(this).attr('value') == 'None'){
                   $('#dt_tag').val($(this).attr('value'));
                   $('.dt-tag-target').html('<%= I18n.t("activerecord.models.transaction_tag.one") %>');
                } else {
                  $('#dt_tag').val($(this).attr('value'));
                  $('.dt-tag-target').html($(this).html());
                }
                $('.dt-tags').hide();
       });
      btn.addClass("button-done");
    }
    function get(url, calledFrom, sFunc, type, eFunc) {
      if (type == null) type = 'get';
      type = type.toLowerCase();
      if (type !== 'get' && type != 'post') type = 'get';
      if (sFunc == null) sFunc = function(){};
      if (eFunc == null) eFunc = function(){};

      $.ajax({
        url: url,
        context: document.body,
        success: sFunc,
        error: function(jqXHR, textStatus, errorThrown) {
          eFunc();
         // alert(textStatus + "--" + errorThrown + "\nCalled from: " + calledFrom + "\nURL: " + url);
        }
      });
    }

    function updateDrawer(obj) {
      $('.pos-cash-register-amount').html(toCurrency(obj.amount));
    }

    function void_item(id) {
      $('body').mask();
      get('/orders/split_order_item?id=' + id, filename, function () {
        window.location.reload();
      });
    }

    function refund_item(id) {
      $('body').mask();

      get('/vendors/toggle?' +
        'field=toggle_refund' +
        '&klass=OrderItem' +
        '&value=true' +
        '&model_id=' + id,
      filename,
      function () {
        window.location.reload();
      }
    );
    }

    /*
    function toDelimited(number) {
      var formatted_value = $().number_format(number, {
        numberOfDecimals: 2,
        decimalSeparator: '<%= I18n.t("number.currency.format.separator") %>',
        thousandSeparator: '<%= I18n.t("number.currency.format.delimiter") %>'
      });
      return (formatted_value);
    }
    */
    function toDelimited(number) {
      var match, property, integerPart, fractionalPart;
      var settings = {         precision: 2,
        unit: "<%= I18n.t("number.currency.format.unit") %>",
        separator: "<%= I18n.t("number.currency.format.separator") %>",
        delimiter : "<%= I18n.t("number.currency.format.delimiter") %>"
      };

      match = number.toString().match(/([\+\-]?[0-9]*)(.[0-9]+)?/);

      if (!match) return;

      integerPart = match[1].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + settings.delimiter);
      fractionalPart = match[2] ? (match[2].toString() + "000000000000").substr(1, settings.precision) : "000000000000".substr(1, settings.precision);

      return integerPart + ( settings.precision > 0 ? settings.separator + fractionalPart : "");
    }

    function toCurrency(number) {
      var match, property, integerPart, fractionalPart;
      var settings = {         precision: 2,
        unit: "<%= I18n.t("number.currency.format.unit") %>",
        separator: "<%= I18n.t("number.currency.format.separator") %>",
        delimiter : "<%= I18n.t("number.currency.format.delimiter") %>"
      };

      match = number.toString().match(/([\+\-]?[0-9]*)(.[0-9]+)?/);

      if (!match) return;

      integerPart = match[1].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + settings.delimiter);
      fractionalPart = match[2] ? (match[2].toString() + "000000000000").substr(1, settings.precision) : "000000000000".substr(1, settings.precision);

      return settings.unit + integerPart + ( settings.precision > 0 ? settings.separator + fractionalPart : "");
    }

    function toPercent(number) {
      var match, property, integerPart, fractionalPart;
      var settings = {         precision: 2,
        unit: "%",
        separator: "<%= I18n.t("number.currency.format.separator") %>",
        delimiter : "<%= I18n.t("number.currency.format.delimiter") %>"
      };

      match = number.toString().match(/([\+\-]?[0-9]*)(.[0-9]+)?/);

      if (!match) return;

      integerPart = match[1].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + settings.delimiter);
      fractionalPart = match[2] ? (match[2].toString() + "000000000000").substr(1, settings.precision) : "000000000000".substr(1, settings.precision);

      return '' + integerPart + ( settings.precision > 0 ? settings.separator + fractionalPart : "") + settings.unit;
    }

    function scrollable_div(elem) {
      if (elem.hasClass('scrollable-done')) {
        return;
      }
      var row = $('<div class="scrollable-button-row" align="right"></div>');
      var up = $('<div class="button-up">&and;</div>');
      var down = $('<div class="button-down" >&or;</div>');
      var spw = $('<div class="scrollable-space-wide">&nbsp;&nbsp;</div>');
      var sp = $('<div class="spacer-rmargin">&nbsp;</div>');
      up.mousedown(function () {
        var e = elem;
        var t = e.scrollTop() - 100;
        if (t < 0) {
          t = 0
        }
        e.scrollTop(t);
      });
      down.mousedown(function () {
        var e = elem;
        var y = elem.offset().top;
        var t = top + 30;
        elem.css({position: 'relative', top: t + 'px'});
      });
      row.append(down);
      row.append(spw);
      row.append(sp);
      row.append(up);

      var x = elem.offset().left;
      var y = elem.offset().top;
      var h = elem.height();
      var w = elem.width();
      $('body').append(row);
      var css = {position: 'absolute',top: (y + h +100) + 'px', left: (x + w - 100) + 'px'};
      row.css(css);
    }

    function cancel_confirm(cancel_func,confirm_func) {
      var row = $('<div class="button-row" align="right"></div>');
      var can = $('<div class="button-cancel"><%= I18n.t("menu.cancel") %></div>');
      can.mousedown(cancel_func);
      var comp = $('<div class="button-confirm"><%= I18n.t("menu.done") %></div>');
      comp.mousedown(confirm_func);
      var sp = $('<div class="spacer-rmargin">&nbsp;</div>');
      var spw = $('<div class="spacer-rmargin">&nbsp;&nbsp;&nbsp;</div>');
      row.append(can);
      var x = Math.random(4);
      if (x == 0) { x = 1;}
      var t = 0;
      for (var i = 0; i <= x; i++) {
        if (t == 0) {
          row.append(sp);
          t = 1;
        } else {
          row.append(spw);
          t = 0;
        }
      }
      row.append(comp);
      return row;
    }

    function div() {
      return $('<div></div>');
    }
    function make_in_place_edit(elem) {
      if (elem.hasClass('editmedone')) {
        return;    
      }
      elem.mousedown(function (event) {
                 in_place_edit($(this).attr('id'),event.pageX,event.pageY);
     }).mouseup(function () {
       $('#inplaceedit').select();
     });
      elem.addClass('editmedone');
    }
    function td(elem,opts) {
      var e = div();
      if (opts && opts.classes) {
        e.addClass(opts.classes.join(' '));
      }
      e.addClass('jtable-cell');
      e.append(elem);
      return e;
    }

    function tr(elements,opts) {
      var e = div();
      if (opts && opts.classes) {
        e.addClass(opts.classes.join(' '));
      }
      e.addClass('table-row');
      for (var i = 0; i < elements.length; i++) {
        e.append(elements[i]);
      }
      return e;
    }

    function make_toggle(elem) {
      elem.css({ cursor: 'pointer'});
      elem.mousedown(function () {
        var elem = $(this);
        $('#main_content').mask('<%= t("views.single_words.saving ")%>');
        get('/vendors/toggle?' +
          'field=' + elem.attr('field') +
          '&klass=' + elem.attr('klass') +
          '&value=' + elem.attr('value') +
          '&model_id=' + elem.attr('model_id'),
        filename,
        function () {
          $('#main_content').unmask();
        }
      );
        if (elem.attr('rev')) {
          elem.attr('src',elem.attr('rev'));
        }
        if (elem.attr('refresh') == 'true') {
          location.reload(true);
        }
      });
      return elem;
    }

    function update_order_items() {
      return;
      get('/orders/update_order_items?ajax=true', filename, function (data) {
        $('#scroll_content').html(data);
        $('#order_items_table tr').removeClass('even')
        $('#order_items_table tr:even').addClass('even');
        $('.pos-lock-small').each(function () {
          make_toggle($(this));
          $('#main_content').unmask();
        });
      });
    }
    function update_pos_display() {
      return;
      get('/orders/update_pos_display?ajax=true', filename, function () {
        $('#main_content').unmask();
      });

    }
    function roundNumber(num, dec) {
      var result = Math.round(num*Math.pow(10,dec))/Math.pow(10,dec);
      return result;
    }
    function span_wrap(text,cls) {
      return '<span class="' + cls + '">'+text+'</span>';
    }

    function div_wrap(text,cls) {
      return '<div class="' + cls + '">'+text+'</div>';
    }
    function arrayCompare(a1, a2) {
      if (a1.length != a2.length) return false;
      var length = a2.length;
      for (var i = 0; i < length; i++) {
        if (a1[i] !== a2[i]) return false;
      }
      return true;
    }

    function inArray(needle, haystack) {
      var length = haystack.length;
      for(var i = 0; i < length; i++) {
        if(typeof haystack[i] == 'object') {
          if(arrayCompare(haystack[i], needle)) return true;
        } else {
          if(haystack[i] == needle) return true;
        }
      }
      return false;
    }

    function make_action_button(elem) {
      if (elem.hasClass("action-button-done")) {
        return elem;
      }
      elem.mousedown(function () {
        var elem = $(this);
        $('#main_content').mask('<%= t("views.single_words.processing") %>');
        get($(this).attr('url'), filename, function () {
          $('#main_content').unmask();
        });
        if ($(this).attr('update_pos_display') == 'true') {
          update_pos_display();
          update_order_items();
        }
        if ($(this).attr('refresh') == 'true') {
          location.reload();
        }
      });
      elem.addClass("action-button-done pointer");
      return elem;
    }

    function set_selected(elem,value,type) { /* 0: Match text, 1: match option value*/
      if (value == null) {
        return elem;
      }
      elem.children("option").each(function () {
        if (type == 0) {
          if ($(this).html() == value) {
            $(this).attr('selected',true);
          }
        } else {
          if ($(this).attr('value') == value) {
            $(this).attr('selected',true);
          }
        }
      });
      return elem;
    }

    function make_keyboardable(elem) {
      if (elem.hasClass('keyboardable-done')) {
        return;
      }
      var kbd = $('<div class="kbd-show-button">&crarr;</div>');

      kbd.mousedown(function () {
        elem.getkeyboard().reveal();
      });
      if (!elem.hasClass('keyboardable-int')) {
        if (elem.hasClass("keyboard-input")) {
            elem.keyboard({
              openOn   : '',
              stayOpen : true,
              layout       : '<%= I18n.locale %>',
              customLayout : null,
              accepted    : function () {
                add_item($("#keyboard_input").val());
              }
            });
        } else {
          elem.keyboard({
            openOn   : '',
            stayOpen : true,
            layout       : '<%= I18n.locale %>',
            customLayout : null,
          });
        }
      } else {
        elem.keyboard({
          openOn      : '',
          stayOpen    : true,
          layout       : 'num',
          customLayout : null,
        });
      }
      elem.addClass("keyboardable-done");
      if (elem.hasClass('left-kbd')) {
        kbd.addClass('kbd-show-left pointer');
        kbd.insertBefore(elem);
      } else {
        kbd.addClass('kbd-show pointer');
        kbd.insertAfter(elem);
        if (elem.hasClass("keyboard-input")) {
          kbd.insertAfter(elem);
          kbd.css({display: 'inline-block'});
        }
      }

      return elem;
    }
    function make_keyboardable_with_options(elem,opts) {
      if (elem.hasClass('keyboardable-done')) {
        return;
      }
      var kbd = $('<div class="kbd-show-button">&crarr;</div>');
      kbd.attr('target_id',"#" + elem.attr('id'));
      kbd.mousedown(function () {
        var target = $(this).attr('target_id');
        $(target).getkeyboard().reveal();
      });
      kbd.addClass('kbd-show pointer');
      var options = {
            openOn   : '',
            stayOpen : true,
            layout       : '<%= I18n.locale %>',
            customLayout : null,
          };
      for (opt in opts) {
        options[opt] = opts[opt];
      }
      if (elem.hasClass('keyboardable-int')) {
        options['layout'] = 'num';    
      }
      elem.keyboard(options);
     kbd.insertAfter(elem);
      return elem;
    }

    function bindInplaceEnter(doBind) {
      if (doBind == null) doBind = true;
      try {
        inplaceEditBindEnter(doBind);
      } catch(e){}
    }

    function enterWasPushed(obj) {
      ('/orders/add_item_ajax?sku=' + obj.val(), filename);
      obj.val('');

    }

    function set_theme(tname) {
      get('/home/set_user_theme_ajax?theme=' + tname, filename);
    }

    function add_item(sku) {
      if (sku.match(/^31\d{8}.{1,2}$/)) {
        var oid = $('.order-id').html();
        var cid = Meta['cash_register_id'];
        var p = ["code=" + sku, "order_id=" +oid, "cash_register_id=" + cid, "redirect="+ escape("/orders/new?cash_register_id=1&order_id=" + oid)];
        window.location = "/employees/login?" + p.join("&");
        return;
      }
      get('/orders/add_item_ajax?order_id='+$('.order-id').html()+'&sku=' + sku, filename);
      $('#keyboard_input').val('');
    }
    function checkFocusInput() {
      if (focuseKeyboardInput) {
        focusInput($('#keyboard_input'));
        focuseKeyboardInput = false;
      }
    }
    function focusInput(inp) {
      $('.salor-focused').removeClass('salor-focused');
      inp.addClass('salor-focused');
      inp.focus();
    }
    function isEditItem() {
      if (params.controller == 'items') {
        if (['new','create','edit','update'].indexOf(params.action) != -1) {
          return true;
        }
      }
    }

    function isEditItemLocation() {
      if (params.controller == 'items') {
        if (params.action == 'update_location') {
          return true;
        }
      }
    }
    function isEditItemRealQuantity() {
      if (params.controller == 'items') {
        if (params.action == 'update_real_quantity') {
          return true;
        }
      }
    }
    function isShipmentsEdit() {
      if (params.controller == 'shipments') {
        if (params.action == 'new' || params.action == 'edit') {
          return true;
        }
      }
    }

    function isDiscountsEdit() {
      if (params.controller == 'discounts') {
        if (params.action == 'new' || params.action == 'edit') {
          return true;
        }
      }
    }

    function isCustomersEdit() {
      if (params.controller == 'customers') {
        if (params.action == 'new' || params.action == 'edit') {
          return true;
        }
      }
    }

    function killEvent(event) {
      event.preventDefault();
      return false;
    }

    /**
     * Safe version of console.log
     **/
    function clog() {
      try {
        if (typeof Salor != 'undefined') {
            // i.e. Salor object is only defined when we are inside of salor gui...
        } else {
          console.log(arguments);
        }
      } catch(e){

      }
    }

    function handleKeyboardInput(event) {
      var handled = false;
      key = event.which;
      if ((key == 13) && handleKeyboardEnter){ //i.e. enter key
        var cf = $('.salor-focused');
        if (cf.hasClass('inplaceeditinput') && cf.val() != '') {
          $('#inplaceeditsave').trigger('click');
          handled = true;
        } else if (cf.hasClass('shipment-items-input') && cf.hasClass('attr-input-sku')) {
          cf.trigger('blur');
          handled = true;
        } else if (cf.attr('id') == 'search_keywords') {
          search();
          event.preventDefault();
          return false;
        }
        if ($('#keyboard_input').val()) {
          keypad_callbacks['Enter'].call(this);
          handled = true;
        } else {
          //we aren't on the pos screen, so we should have some generic behaviors
          if (params.controller == "shippers") {
            handled = true;
          }
          focusInput($('#keyboard_input'));
        }
        if ($('#generic_search_input').length != 0 && $('#generic_search_input').val() != '') {
          generic_search();
          handled = true;
          return false;
        }
        if (isEditItem()) {
          handled = true;
          return false;
        }
        if (isEditItemLocation()) {
          update_location_submit();
          handled = true;
          return false;
        }
        if (isEditItemRealQuantity()) {
          update_real_quantity_submit();
          handled = true;
          return false;
        }
        if (isShipmentsEdit()) {
          shipments_edit_handler(event.target);
          handled = true;
          return false;
        }
        if (isDiscountsEdit() || isCustomersEdit()) {
          handled = true;
          return false;
        }
      }
      if (handled == true) {
        event.preventDefault();
        return false;
      } else {
        return true;
      }
    }
    function editLastAddedItem() {
      var itemid = $(".pos-table-left-column-items").children(":first").attr('item_id');
      if (itemid) {
        var string = '/items/' + itemid + '/edit'
        window.location = string;
      }
    }
    function scroll_order_items() {
      /* document.getElementById('scroll_content').scrollTop = document.getElementById('scroll_content').scrollHeight;*/
    }

    setInterval('checkFocusInput()',200);

    $.keyboard.layouts['de'] = {
      'default' : [
        "\u0302 1 2 3 4 5 6 7 8 9 0 \u00df \u0301 {b}",
        "{tab} q w e r t z u i o p \u00fc +",
        "a s d f g h j k l \u00f6 \u00e4 #",
        "{shift} < y x c v b n m , . - {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'shift' : [
        '\u00b0 ! " \u00a7 $ % & / ( ) = ? \u0300 {b}',
        "{tab} Q W E R T Z U I O P \u00dc *",
        "A S D F G H J K L \u00d6 \u00c4 '",
        "{shift} > Y X C V B N M ; : _ {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'alt' : [
        '\u0302 1 \u00b2 \u00b3 4 5 6 { [ ] } \\ \u0301 {b}',
        "{tab} @ w \u20ac r t z u i o p \u00fc \u0303",
        "a s d f g h j k l \u00f6 \u00e4 #",
        "{shift} \u007c y x c v b n \u00b5 , . - {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ]
    };
    $.keyboard.layouts['en-US'] = {
      'default' : [
        "` 1 2 3 4 5 6 7 8 9 0 - = {b}",
        "{tab} q w e r t y u i o p [ ]",
        "a s d f g h j k l ; ' \\",
        "{shift} z x c v b n m , . / {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'shift' : [
        "~ ! @ # $ % ^ & * ( ) _ + {b}",
        "{tab} Q W E R T Y U I O P { }",
        'A S D F G H J K L : " |',
        "{shift} Z X C V B N M < > ? {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'alt' : [
        '~ ! " \u00a3 \u20ac \u00b2 \u00b3 & * ( ) _ + {b}',
        "{tab} q w e r t y u i o p { }",
        'a s d f g h j k l : " |',
        "{shift} z x c v b n m < > ? {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ]
    };
    $.keyboard.layouts['en-GB'] = {
      'default' : [
        "` 1 2 3 4 5 6 7 8 9 0 - = {b}",
        "{tab} q w e r t y u i o p [ ]",
        "a s d f g h j k l ; ' #",
        "{shift} \\ z x c v b n m , . / {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'shift' : [
        '\u00ac ! " \u00a3 $ % ^ & * ( ) _ + {b}',
        "{tab} Q W E R T Y U I O P { }",
        "A S D F G H J K L : @ ~",
        "{shift} | Z X C V B N M < > ? {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'alt' : [
        '\u00a6 ! " \u00a3 \u20ac \u00b2 \u00b3 7 8 9 0 - = {b}',
        "{tab} q w e r t y u i o p [ ]",
        "a s d f g h j k l ; ' #",
        "{shift} \\ z x c v b n m , . / {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ]
    };
    $.keyboard.layouts['en-AU'] = $.keyboard.layouts['en-US'];
    $.keyboard.layouts['fr'] = {
      'default' : [
        "\u00b2 & \u00e9 \" ' ( - \u00e8 _ \u00e7 \u00e0 ) = {b}",
        "{tab} a z e r t y u i o p \u02c4 $",
        "q s d f g h j k l m \u00f9 *",
        "{shift} < w x c v b n , ; : ! {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'shift' : [
        "\u00b2 1 2 3 4 5 6 7 8 9 0 \u00b0 + {b}",
        "{tab} A Z E R T Y U I O P \u00a8 \u00a3",
        "Q S D F G H J K L M % \u00b5",
        "{shift} > W X C V B N ? . / \u00a7 {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ],
      'alt' : [
        "\u00b2 & \u00e9 # { [ \u00a6 ` \\ ^ @ ] } {b}",
        "{tab} a z \u20ac r t y u i o p \u00a4 $",
        "q s d f g h j k l m \u00f9 *",
        "{shift} < w x c v b n , ; : ! {shift}",
        "{c} {clear} {alt} {space} {alt} {a}"
      ]
    };
    $.keyboard.layouts['num'] = {
      'default' : [
        "7 8 9",
        "4 5 6",
        "1 2 3",
        "{clear} 0 ,",
        "{c} {a}"
      ]
    };

    $.keyboard.layouts['num_old'] = {
      'default' : [
        '{cancel} {clear} {bksp}',
        '1 2 3 4',
        '5 6 7 8',
        '9 0 - .',
        '{accept}'
      ]
    };

    //window.captureEvents(Event.KEYDOWN);
    //window.onkeydown = handleKeyboardInput;
    /* This is how we trap the Enter Key */
    //window.captureEvents(Event.KEYDOWN);
    //window.onkeydown = handleKeyboardInput;
<% end -%>

  /* Put all document ready code in shared/js/document_ready */
</script>
<%= salor_render :partial => "shared/js/document_ready" %>
